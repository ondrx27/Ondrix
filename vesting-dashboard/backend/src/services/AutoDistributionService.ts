// backend/src/services/AutoDistributionService.ts
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

import { EventEmitter } from 'events';
import { Connection, PublicKey, Keypair, Transaction, TransactionInstruction, sendAndConfirmTransaction, SYSVAR_CLOCK_PUBKEY, ComputeBudgetProgram } from '@solana/web3.js';
import { 
  TOKEN_PROGRAM_ID, 
  getAssociatedTokenAddress, 
  createAssociatedTokenAccountInstruction,
  getAccount
} from '@solana/spl-token';
import { ethers } from 'ethers';
import fs from 'fs';
import path from 'path';

interface VestingContract {
  id: string;
  chain: 'solana' | 'bnb';
  address: string;
  beneficiaryAddress: string;
  startTime: number;
  recipients: Array<{ 
    wallet: string; 
    percentage: number;
    basisPoints?: number;  // ‚úÖ UPDATED: Add basis points support
  }>;
  lastDistributionTime: number;
  isActive: boolean;
  // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
  distributedPeriods: Set<number>; // –ö–∞–∫–∏–µ –ø–µ—Ä–∏–æ–¥—ã —É–∂–µ –±—ã–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
  totalDistributed: string; // –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
  lastCheckedAmount: string; // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
}

interface DistributionEvent {
  vestingId: string;
  chain: 'solana' | 'bnb';
  transactionHash: string;
  amount: string;
  timestamp: number;
  recipients: Array<{ wallet: string; amount: string }>;
  period: number; // –ö–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –±—ã–ª —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω
}

interface DistributionResult {
  transactionHash: string;
  totalAmount: string;
  recipients: Array<{ wallet: string; amount: string }>;
  period: number;
}

interface ContractBalance {
  total: string;
  distributed: string;
  available: string;
  claimableNow: string;
}

class AutoDistributionService extends EventEmitter {
  private isRunning = false;
  private checkInterval = 300000; // 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)
  private intervalId: NodeJS.Timeout | null = null;
  private vestingContracts: Map<string, VestingContract> = new Map();

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  private config = {
    solana: {
      rpcUrl: process.env.SOLANA_RPC_URL || 'https://api.devnet.solana.com',
      programId: process.env.SOLANA_PROGRAM_ID || '5Q45ww8uwWsnLpZa8ivFFp6ENfVFHE9yCARTs1CJ3xZB',
      mintAddress: process.env.SOLANA_MINT_ADDRESS || 'CaYYqEzktvpPXkqpFeUGrs5kt6QDk7vmnb5GVzydDJJb',
      privateKey: process.env.SOLANA_PRIVATE_KEY || '',
      vestingPDA: process.env.SOLANA_VESTING_PDA || '',
    },
    bnb: {
      rpcUrl: process.env.BNB_RPC_URL || 'https://bsc-testnet.drpc.org',
      privateKey: process.env.BNB_PRIVATE_KEY || '',
      contractAddress: process.env.BNB_CONTRACT_ADDRESS || '',
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∞–¥—Ä–µ—Å —á—Ç–æ –∏ –≤ —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      knownInitializer: process.env.KNOWN_INITIALIZER || process.env.BNB_BENEFICIARY_ADDRESS || '',
    }
  };

  constructor() {
    super();
    this.validateConfig();
    this.loadVestingContracts();
  }

  // Utility method for safe error message extraction
  private getErrorMessage(error: unknown): string {
    if (error instanceof Error) return error.message;
    if (typeof error === 'string') return error;
    if (error && typeof error === 'object' && 'message' in error) {
      return String((error as any).message);
    }
    return 'Unknown error occurred';
  }

  private validateConfig() {
    if (!this.config.solana.privateKey) {
      console.warn('‚ö†Ô∏è  SOLANA_PRIVATE_KEY not configured');
    }
    if (!this.config.bnb.privateKey) {
      console.warn('‚ö†Ô∏è  BNB_PRIVATE_KEY not configured');
    }
  }

  // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–¥–∞—á–∏
  async start() {
    if (this.isRunning) {
      console.log('Auto distribution already running');
      return;
    }

    this.isRunning = true;
    console.log('üöÄ Starting auto distribution service...');

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    await this.checkDistributions();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    this.intervalId = setInterval(async () => {
      try {
        await this.checkDistributions();
      } catch (error) {
        const errorMessage = this.getErrorMessage(error);
        console.error('Error in auto distribution:', errorMessage);
        this.emit('distributionError', { error: errorMessage });
      }
    }, this.checkInterval);

    this.emit('serviceStarted');
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–¥–∞—á–∏
  async stop() {
    if (!this.isRunning) {
      console.log('Auto distribution not running');
      return;
    }

    this.isRunning = false;
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }

    console.log('üõë Auto distribution service stopped');
    this.emit('serviceStopped');
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ä–∞–∑–¥–∞—á–∏
  private async checkDistributions() {
    const currentTime = Math.floor(Date.now() / 1000);
    console.log(`\nüîç Checking distributions at ${new Date().toLocaleString()}`);

    for (const [id, contract] of this.vestingContracts.entries()) {
      if (!contract.isActive) {
        console.log(`   ‚è∏Ô∏è  Contract ${id} is inactive, skipping`);
        continue;
      }

      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        await this.updateContractBalance(contract);
        
        const shouldDistribute = await this.shouldDistribute(contract, currentTime);
        
        if (shouldDistribute.should && shouldDistribute.period !== undefined) {
          console.log(`üéØ Distributing tokens for contract ${id} (Period ${shouldDistribute.period}%)`);
          await this.distribute(contract, shouldDistribute.period);
        }
      } catch (error) {
        const errorMessage = this.getErrorMessage(error);
        console.error(`‚ùå Error processing contract ${id}:`, errorMessage);
        this.emit('distributionError', { contractId: id, error: errorMessage });
      }
    }
    
    console.log(`‚úÖ Distribution check completed\n`);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  private async updateContractBalance(contract: VestingContract): Promise<ContractBalance> {
    if (contract.chain === 'solana') {
      return await this.getSolanaContractBalance(contract);
    } else {
      return await this.getBNBContractBalance(contract);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ Solana –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (–û–ë–ù–û–í–õ–ï–ù–û –ø–æ–¥ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç)
  private async getSolanaContractBalance(contract: VestingContract): Promise<ContractBalance> {
    try {
      const connection = new Connection(this.config.solana.rpcUrl, 'confirmed');
      const vestingPDA = new PublicKey(contract.address);
      
      const vestingAccountInfo = await connection.getAccountInfo(vestingPDA);
      if (!vestingAccountInfo) {
        return { total: '0', distributed: '0', available: '0', claimableNow: '0' };
      }
      
      const vestingAccount = this.parseVestingAccount(vestingAccountInfo.data);
      if (!vestingAccount.isInitialized) {
        return { total: '0', distributed: '0', available: '0', claimableNow: '0' };
      }

      // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É —É–∂–µ –∑–∞–∫–ª–µ–π–º–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
      const totalClaimed = vestingAccount.recipients.reduce((sum, recipient) => {
        return sum + BigInt(recipient.claimedAmount || 0);
      }, 0n);

      const currentTime = Math.floor(Date.now() / 1000);
      const elapsed = currentTime - vestingAccount.startTime;
      const vestedAmount = this.calculateVestedAmount(BigInt(vestingAccount.totalAmount), elapsed);
      const claimableNow = vestedAmount - totalClaimed;

      const balance: ContractBalance = {
        total: BigInt(vestingAccount.totalAmount).toString(),
        distributed: totalClaimed.toString(),
        available: (BigInt(vestingAccount.totalAmount) - totalClaimed).toString(),
        claimableNow: claimableNow > 0n ? claimableNow.toString() : '0'
      };

      contract.lastCheckedAmount = balance.available;
      return balance;

    } catch (error) {
      const errorMessage = this.getErrorMessage(error);
      console.warn(`‚ö†Ô∏è  Could not get Solana balance: ${errorMessage}`);
      return { total: '0', distributed: '0', available: '0', claimableNow: '0' };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ BNB –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (–û–ë–ù–û–í–õ–ï–ù–û –ø–æ–¥ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç ProductionTokenVesting)
  private async getBNBContractBalance(contract: VestingContract): Promise<ContractBalance> {
    try {
      const provider = new ethers.JsonRpcProvider(this.config.bnb.rpcUrl);
      const vestingABI = [
        'function getVestingSchedule(address beneficiary) external view returns (bool isInitialized, address token, address authorizedFunder, uint256 startTime, uint256 cliffDuration, uint256 vestingDuration, uint256 totalAmount, uint256 claimedAmount, uint8 recipientCount)',
        'function getClaimableAmount(address beneficiary) external view returns (uint256)',
        'function canDistribute(address beneficiary) external view returns (bool)'
      ];
      
      const vestingContract = new ethers.Contract(
        contract.address,
        vestingABI,
        provider
      );
      
      const schedule = await vestingContract.getVestingSchedule(contract.beneficiaryAddress);
      if (!schedule.isInitialized) {
        return { total: '0', distributed: '0', available: '0', claimableNow: '0' };
      }

      const claimableAmount = await vestingContract.getClaimableAmount(contract.beneficiaryAddress);
      const canDistribute = await vestingContract.canDistribute(contract.beneficiaryAddress);
      
      console.log(`üîç BNB Contract debug info:`);
      console.log(`   - getClaimableAmount(): ${claimableAmount.toString()}`);
      console.log(`   - canDistribute(): ${canDistribute}`);
      
      const balance: ContractBalance = {
        total: schedule.totalAmount.toString(),
        distributed: schedule.claimedAmount.toString(),
        available: (schedule.totalAmount - schedule.claimedAmount).toString(),
        claimableNow: claimableAmount.toString()
      };

      contract.lastCheckedAmount = balance.available;
      return balance;

    } catch (error) {
      const errorMessage = this.getErrorMessage(error);
      console.warn(`‚ö†Ô∏è  Could not get BNB balance: ${errorMessage}`);
      return { total: '0', distributed: '0', available: '0', claimableNow: '0' };
    }
  }

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç–æ–∫–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  private async shouldDistribute(contract: VestingContract, currentTime: number): Promise<{should: boolean, period?: number}> {
    // ‚úÖ RESTORED: –ê–≤—Ç–æ–¥–∏—Å—Ç—Ä–∏–±—É—Ü–∏—è BNB –≤–∫–ª—é—á–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ
    // Removed temporary disable - BNB auto-distribution is now active

    if (!contract.recipients.length || !contract.startTime) {
      console.log(`   - Contract not ready: recipients=${contract.recipients.length}, startTime=${contract.startTime}`);
      return { should: false };
    }

    const elapsed = currentTime - contract.startTime;
    
    console.log(`üîç Checking contract ${contract.id}:`);
    console.log(`   - Chain: ${contract.chain}`);
    console.log(`   - Start time: ${new Date(contract.startTime * 1000).toLocaleString()}`);
    console.log(`   - Elapsed: ${Math.floor(elapsed / 60)} minutes ${elapsed % 60} seconds`);
    console.log(`   - Last distribution: ${contract.lastDistributionTime > 0 ? new Date(contract.lastDistributionTime * 1000).toLocaleString() : 'Never'}`);
    console.log(`   - Recipients: ${contract.recipients.length}`);
    console.log(`   - Distributed periods: [${Array.from(contract.distributedPeriods).join(', ')}]`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    const balance = await this.updateContractBalance(contract);
    console.log(`   - Total in contract: ${balance.total}`);
    console.log(`   - Already distributed: ${balance.distributed}`);
    console.log(`   - Available: ${balance.available}`);
    console.log(`   - Claimable now: ${balance.claimableNow}`);

    // ‚úÖ –ì–õ–ê–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ –µ—Å—Ç—å claimable —Ç–æ–∫–µ–Ω—ã - –∑–Ω–∞—á–∏—Ç –º–æ–∂–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å
    if (BigInt(balance.claimableNow) <= 0n) {
      console.log(`   - No tokens available for distribution (claimableNow: ${balance.claimableNow})`);
      return { should: false };
    }

    // –ü–µ—Ä–∏–æ–¥—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    const unlockPeriods = [
      { time: 300, percentage: 10 },   // 5 –º–∏–Ω—É—Ç
      { time: 600, percentage: 20 },   // 10 –º–∏–Ω—É—Ç
      { time: 900, percentage: 50 },   // 15 –º–∏–Ω—É—Ç
      { time: 1200, percentage: 100 }  // 20 –º–∏–Ω—É—Ç
    ];

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏, –∞ –Ω–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    let currentPeriod = 0;
    for (const period of unlockPeriods) {
      console.log(`   - Period ${period.percentage}%: ${elapsed >= period.time ? 
                  '‚úÖ UNLOCKED' : '‚è≥ PENDING'} (${Math.floor(period.time / 60)}min) ${
                  contract.distributedPeriods.has(period.percentage) ? '[DISTRIBUTED]' : '[WAITING]'}`);
      
      if (elapsed >= period.time) {
        currentPeriod = period.percentage;
      }
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï—Å–ª–∏ –µ—Å—Ç—å claimable —Ç–æ–∫–µ–Ω—ã –∏ –≤—Ä–µ–º—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞—Å—Ç—É–ø–∏–ª–æ - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º
    if (currentPeriod > 0) {
      console.log(`‚è∞ Time to distribute - current period ${currentPeriod}% unlocked with ${balance.claimableNow} claimable tokens`);
      console.log(`   - Current time: ${new Date(currentTime * 1000).toLocaleString()}`);
      return { should: true, period: currentPeriod };
    }

    console.log(`   - No distribution needed: currentPeriod=${currentPeriod}, claimableNow=${balance.claimableNow}`);
    return { should: false };
  }

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ vested —Ç–æ–∫–µ–Ω–æ–≤
  private calculateVestedAmount(totalAmount: bigint, elapsedSeconds: number): bigint {
    let percentage: number;
    if (elapsedSeconds < 0) {
      percentage = 0;
    } else if (elapsedSeconds < 300) {  // 0-5 minutes
      percentage = 10;
    } else if (elapsedSeconds < 600) {  // 5-10 minutes
      percentage = 20;
    } else if (elapsedSeconds < 900) {  // 10-15 minutes
      percentage = 50;
    } else {  // 15+ minutes
      percentage = 100;
    }
    
    return (totalAmount * BigInt(percentage)) / 100n;
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–¥–∞—á–∏
  private async distribute(contract: VestingContract, period: number): Promise<DistributionResult> {
    try {
      let result: DistributionResult;
      
      if (contract.chain === 'solana') {
        result = await this.distributeSolana(contract, period);
      } else {
        result = await this.distributeBNB(contract, period);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞–∑–¥–∞—á–∏ –∏ –æ—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∫–∞–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π
      contract.lastDistributionTime = Math.floor(Date.now() / 1000);
      contract.distributedPeriods.add(period);
      
      // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–∑–¥–∞—á–∏
      const event: DistributionEvent = {
        vestingId: contract.id,
        chain: contract.chain,
        transactionHash: result.transactionHash,
        amount: result.totalAmount,
        timestamp: contract.lastDistributionTime,
        recipients: result.recipients,
        period: period
      };

      this.emit('distribution', event);
      console.log(`‚úÖ Distribution completed for ${contract.id} (Period ${period}%): ${result.transactionHash}`);

      return result;

    } catch (error) {
      const errorMessage = this.getErrorMessage(error);
      console.error(`‚ùå Distribution failed for ${contract.id}:`, errorMessage);
      this.emit('distributionError', { contractId: contract.id, error: errorMessage, period });
      throw error;
    }
  }

  // –†–∞–∑–¥–∞—á–∞ Solana —Ç–æ–∫–µ–Ω–æ–≤ - –õ–û–ì–ò–ö–ê –ò–ó 3-claim.js
  private async distributeSolana(contract: VestingContract, period: number): Promise<DistributionResult> {
    console.log(`üåû Starting Solana distribution for period ${period}% using 3-claim.js logic...`);
    
    const connection = new Connection(this.config.solana.rpcUrl, 'confirmed');
    const programId = new PublicKey(this.config.solana.programId);
    const vestingPDA = new PublicKey(contract.address);
    
    // ‚úÖ FIX: Get mint address from vesting account data
    const vestingAccountInfo = await connection.getAccountInfo(vestingPDA);
    if (!vestingAccountInfo) {
      throw new Error('Vesting PDA account not found');
    }
    const vestingAccount = this.parseVestingAccount(vestingAccountInfo.data);
    const mintAddress = new PublicKey(vestingAccount.mint);
    
    // –°–æ–∑–¥–∞–µ–º keypair –∏–∑ private key (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–º –∂–µ —á—Ç–æ –∏ initializer!)
    const privateKeyArray = JSON.parse(this.config.solana.privateKey);
    const initializer = Keypair.fromSecretKey(Uint8Array.from(privateKeyArray));
    
    console.log('Initializer (claim caller) address:', initializer.publicKey.toBase58());
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
      const balance = await connection.getBalance(initializer.publicKey);
      console.log(`SOL balance: ${balance / 1e9} SOL`);
      
      if (balance < 0.01 * 1e9) {
        throw new Error('Insufficient SOL balance for distribution (need at least 0.01 SOL)');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
      const contractBalance = await this.getSolanaContractBalance(contract);
      
      if (BigInt(contractBalance.claimableNow) <= 0n) {
        throw new Error('No tokens available to distribute');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º vault PDA
      const [vaultPDA] = await PublicKey.findProgramAddress(
        [Buffer.from('vault'), vestingPDA.toBuffer()],
        programId
      );
      console.log('Vault PDA:', vaultPDA.toBase58());
      
      // ‚úÖ REMOVED: Duplicate vesting account check (already done above)
      if (!vestingAccount.isInitialized) {
        throw new Error('Vesting account not initialized');
      }
      
      if (vestingAccount.startTime === 0) {
        throw new Error('Vesting not funded yet');
      }
      
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const transaction = new Transaction();
      
      // –î–æ–±–∞–≤–ª—è–µ–º compute budget –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      transaction.add(
        ComputeBudgetProgram.setComputeUnitLimit({ units: 1_000_000 })
      );
      
      // –°–æ–∑–¥–∞–µ–º/–ø—Ä–æ–≤–µ—Ä—è–µ–º ATA –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
      const recipientATAs: PublicKey[] = [];
      for (const recipient of contract.recipients) {
        const recipientPubkey = new PublicKey(recipient.wallet);
        const ata = await getAssociatedTokenAddress(mintAddress, recipientPubkey);
        recipientATAs.push(ata);

        try {
          await getAccount(connection, ata);
          console.log(`  ‚úÖ ATA exists for ${recipient.wallet.substring(0, 8)}...`);
        } catch {
          console.log(`  ‚öôÔ∏è  Creating ATA for ${recipient.wallet.substring(0, 8)}...`);
          transaction.add(
            createAssociatedTokenAccountInstruction(
              initializer.publicKey,  // payer
              ata,                   // ata
              recipientPubkey,       // owner
              mintAddress           // mint
            )
          );
        }
      }
      
      // –ü–æ–ª—É—á–∞–µ–º vault authority PDA
      const [vaultAuthority] = await PublicKey.findProgramAddress(
        [Buffer.from('authority'), vestingPDA.toBuffer()],
        programId
      );
      
      // –°–æ–∑–¥–∞–µ–º claim –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ 3-claim.js
      const claimInstruction = this.createClaimInstruction(
        programId,
        initializer.publicKey,      // initializer (signer)
        vestingPDA,                // vesting PDA
        vaultPDA,                  // vault PDA
        vaultAuthority,            // vault authority PDA
        recipientATAs              // recipient ATAs
      );
      
      transaction.add(claimInstruction);
      
      // –ü–æ–ª—É—á–∞–µ–º recent blockhash
      const { blockhash } = await connection.getRecentBlockhash();
      transaction.recentBlockhash = blockhash;
      transaction.feePayer = initializer.publicKey;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      console.log('üì§ Sending Solana distribution transaction...');
      
      const signature = await sendAndConfirmTransaction(
        connection,
        transaction,
        [initializer],
        {
          commitment: 'confirmed',
          preflightCommitment: 'confirmed',
        }
      );
      
      console.log(`‚úÖ Solana distribution successful: ${signature}`);
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞
      const distributedAmount = BigInt(contractBalance.claimableNow);
      
      // ‚úÖ FIX: Use basis points (10000 = 100%) instead of percentage
      const recipients = contract.recipients.map(r => {
        const basisPoints = r.basisPoints || (r.percentage * 100); // Handle both formats
        return {
          wallet: r.wallet,
          amount: ((distributedAmount * BigInt(basisPoints)) / 10000n).toString()
        };
      });
      
      return {
        transactionHash: signature,
        totalAmount: distributedAmount.toString(),
        recipients,
        period
      };
      
    } catch (error) {
      const errorMessage = this.getErrorMessage(error);
      console.error('‚ùå Error in Solana distribution:', errorMessage);
      throw error;
    }
  }

  // –†–∞–∑–¥–∞—á–∞ BNB —Ç–æ–∫–µ–Ω–æ–≤ - –õ–û–ì–ò–ö–ê –ò–ó claim-tockens.ts
  private async distributeBNB(contract: VestingContract, period: number): Promise<DistributionResult> {
    console.log(`üü° Starting BNB distribution for period ${period}% using ProductionTokenVesting logic...`);
    
    const provider = new ethers.JsonRpcProvider(this.config.bnb.rpcUrl);
    const wallet = new ethers.Wallet(this.config.bnb.privateKey, provider);
    
    console.log('Distribution wallet address:', wallet.address);
    console.log('Expected beneficiary address:', contract.beneficiaryAddress);
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ wallet —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç beneficiary
    // –í ProductionTokenVesting distributeTokens() –∏–º–µ–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä onlyBeneficiary
    // –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç vestingSchedules[msg.sender].isInitialized
    if (wallet.address.toLowerCase() !== contract.beneficiaryAddress.toLowerCase()) {
      throw new Error(`CRITICAL: Wallet ${wallet.address} != beneficiary ${contract.beneficiaryAddress}. distributeTokens() requires beneficiary as msg.sender`);
    }
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
      const balance = await provider.getBalance(wallet.address);
      console.log(`BNB balance: ${ethers.formatEther(balance)} BNB`);
      
      if (balance < ethers.parseEther('0.001')) {
        throw new Error('Insufficient BNB balance for distribution (need at least 0.001 BNB)');
      }
      
      // ABI –¥–ª—è ProductionTokenVesting –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
      const vestingABI = [
        'function distributeTokens() external',
        'function getVestingSchedule(address beneficiary) external view returns (bool isInitialized, address token, address authorizedFunder, uint256 startTime, uint256 cliffDuration, uint256 vestingDuration, uint256 totalAmount, uint256 claimedAmount, uint8 recipientCount)',
        'function getClaimableAmount(address beneficiary) external view returns (uint256)',
        'function getRecipients(address beneficiary) external view returns (tuple(address wallet, uint16 basisPoints, uint256 claimedAmount, uint256 lastClaimTime)[])',
        'function canDistribute(address beneficiary) external view returns (bool)'
      ];
      
      const vestingContract = new ethers.Contract(
        contract.address,
        vestingABI,
        wallet
      );
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–µ—Å—Ç–∏–Ω–≥–∞
      console.log(`üîç Checking vesting schedule for beneficiary: ${contract.beneficiaryAddress}`);
      const schedule = await vestingContract.getVestingSchedule(contract.beneficiaryAddress);
      
      if (!schedule.isInitialized) {
        throw new Error(`No vesting schedule found for beneficiary ${contract.beneficiaryAddress}`);
      }
      
      console.log(`üìã Vesting schedule confirmed for ${contract.beneficiaryAddress}`);
      console.log(`   Total amount: ${ethers.formatEther(schedule.totalAmount)} tokens`);
      console.log(`   Start time: ${schedule.startTime > 0 ? new Date(Number(schedule.startTime) * 1000).toISOString() : 'Not started'}`);
      
      // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ wallet —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç beneficiary
      // –í ProductionTokenVesting distributeTokens() –∏–º–µ–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä onlyBeneficiary
      // –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç vestingSchedules[msg.sender].isInitialized
      if (wallet.address.toLowerCase() !== contract.beneficiaryAddress.toLowerCase()) {
        throw new Error(`CRITICAL: Wallet ${wallet.address} != beneficiary ${contract.beneficiaryAddress}. distributeTokens() requires beneficiary as msg.sender`);
      }
      
      console.log('‚úÖ Vesting schedule found');
      console.log(`  - Start time: ${schedule.startTime > 0 ? 
                  new Date(Number(schedule.startTime) * 1000).toLocaleString() : 'Not funded'}`);
      console.log(`  - Total amount: ${ethers.formatEther(schedule.totalAmount)} tokens`);
      console.log(`  - Claimed amount: ${ethers.formatEther(schedule.claimedAmount)} tokens`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
      const canDistribute = await vestingContract.canDistribute(contract.beneficiaryAddress);
      console.log(`üìã Can distribute: ${canDistribute}`);
      
      if (!canDistribute) {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –ø–æ—á–µ–º—É –Ω–µ–ª—å–∑—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å
        const currentTime = Math.floor(Date.now() / 1000);
        const cliffEndTime = schedule.startTime + schedule.cliffDuration;
        const isCliffPassed = currentTime >= cliffEndTime;
        const lastDistTime = schedule.lastDistributionTime || 0;
        const cooldownPassed = lastDistTime === 0 || currentTime >= lastDistTime + 60; // 60 seconds cooldown
        
        console.log(`‚ùå Cannot distribute tokens:`);
        console.log(`   - Cliff passed: ${isCliffPassed} (current: ${currentTime}, cliff end: ${cliffEndTime})`);
        console.log(`   - Cooldown passed: ${cooldownPassed} (last dist: ${lastDistTime})`);
        console.log(`   - Is finalized: ${schedule.isInitialized}`);
        
        throw new Error('Cannot distribute tokens at this time - see logs above');
      }
      
      const claimableAmount = await vestingContract.getClaimableAmount(contract.beneficiaryAddress);
      console.log(`üìã Claimable amount: ${ethers.formatEther(claimableAmount)} tokens`);
      
      if (claimableAmount === 0n) {
        throw new Error('No tokens available to distribute');
      }
      
      // –í–´–ü–û–õ–ù–Ø–ï–ú –†–ï–ê–õ–¨–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï —Å –ø–æ–º–æ—â—å—é distributeTokens()
      console.log('üöÄ Executing REAL distribution transaction...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º gas estimate —Å–Ω–∞—á–∞–ª–∞
      let tx: any;
      try {
        const gasEstimate = await vestingContract.distributeTokens.estimateGas();
        console.log(`üìä Gas estimate: ${gasEstimate.toString()}`);
        
        tx = await vestingContract.distributeTokens({
          gasLimit: gasEstimate + (gasEstimate / 5n) // Add 20% buffer
        });
        
        console.log('Transaction hash:', tx.hash);
        console.log('Waiting for confirmation...');
        const receipt = await tx.wait();
        console.log(`‚úÖ Transaction confirmed in block ${receipt?.blockNumber}`);
        
        if (receipt?.status === 0) {
          throw new Error('Transaction failed (reverted)');
        }
      } catch (gasError: any) {
        console.error('‚ùå Gas estimation failed:', gasError?.reason || gasError?.message);
        
        // If gas estimation fails, the transaction will likely revert
        // Let's check what the exact error is
        if (gasError?.reason) {
          console.error(`‚ùå Revert reason: ${gasError.reason}`);
        }
        if (gasError?.code) {
          console.error(`‚ùå Error code: ${gasError.code}`);
        }
        
        // Don't attempt the transaction if gas estimation fails
        throw new Error(`Distribution failed: ${gasError?.reason || gasError?.message}`);
      }
      
      console.log(`‚úÖ Real BNB distribution successful: ${tx.hash}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º
      const recipients = await vestingContract.getRecipients(contract.beneficiaryAddress);
      
      const distributionAmounts = recipients.map((recipient: any) => ({
        wallet: recipient.wallet,
        amount: ((claimableAmount * BigInt(recipient.basisPoints)) / 10000n).toString()  // Convert basis points (10000 = 100%)
      }));
      
      return {
        transactionHash: tx.hash,
        totalAmount: claimableAmount.toString(),
        recipients: distributionAmounts,
        period
      };
      
    } catch (error) {
      const errorMessage = this.getErrorMessage(error);
      console.error('‚ùå Error in BNB distribution:', errorMessage);
      throw error;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ claim –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ 3-claim.js
  private createClaimInstruction(
    programId: PublicKey,
    initializer: PublicKey,
    vestingPDA: PublicKey,
    vaultPDA: PublicKey,
    vaultAuthority: PublicKey,
    recipientATAs: PublicKey[]
  ): TransactionInstruction {
    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: —Ç–æ–ª—å–∫–æ 1 –±–∞–π—Ç (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è)
    const data = Buffer.alloc(1);
    
    // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è 2 = Claim (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ 3-claim.js)
    data[0] = 2;
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ 3-claim.js
    const keys = [
      { pubkey: initializer, isSigner: true, isWritable: true },         // 0. Initializer (signer)
      { pubkey: vestingPDA, isSigner: false, isWritable: true },         // 1. Vesting PDA
      { pubkey: vaultPDA, isSigner: false, isWritable: true },           // 2. Vault PDA
      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },  // 3. Token Program
      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false }, // 4. Clock Sysvar
      { pubkey: vaultAuthority, isSigner: false, isWritable: false },    // 5. Vault Authority PDA
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º ATA –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (6+) —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ 3-claim.js
    for (const ata of recipientATAs) {
      keys.push({ pubkey: ata, isSigner: false, isWritable: true });
    }
    
    return new TransactionInstruction({
      programId,
      keys,
      data,
    });
  }

  // ‚úÖ UPDATED: –ü–∞—Ä—Å–µ—Ä –¥–ª—è Solana vesting –∞–∫–∫–∞—É–Ω—Ç–∞ —Å basis points (u16)
  private parseVestingAccount(data: Buffer) {
    if (!data || data.length < 640) {  // Updated minimum size with basis points
      throw new Error(`Invalid vesting account data. Length: ${data?.length || 0}, expected at least 640`);
    }
    
    let offset = 0;
    
    const isInitialized = data[offset] !== 0;
    offset += 1;
    
    const initializer = new PublicKey(data.slice(offset, offset + 32)).toString();
    offset += 32;
    
    const mint = new PublicKey(data.slice(offset, offset + 32)).toString();
    offset += 32;
    
    const vault = new PublicKey(data.slice(offset, offset + 32)).toString();
    offset += 32;
    
    const startTime = Number(this.readInt64LE(data, offset));
    offset += 8;
    
    const totalAmount = Number(this.readUint64LE(data, offset));
    offset += 8;
    
    const cliffPeriod = Number(this.readInt64LE(data, offset));
    offset += 8;
    
    const vestingPeriod = Number(this.readInt64LE(data, offset));
    offset += 8;
    
    // ‚úÖ UPDATED: TGE basis points (u16 instead of u8)
    const tgeBasisPoints = data.readUInt16LE(offset);
    offset += 2;
    
    const recipientCount = data[offset];
    offset += 1;
    
    // ‚úÖ UPDATED: New fields from contract
    const isFinalized = data[offset] !== 0;
    offset += 1;

    const lastDistributionTime = Number(this.readInt64LE(data, offset));
    offset += 8;

    const recipients = [];
    for (let i = 0; i < Math.min(recipientCount, 10); i++) {
      // ‚úÖ UPDATED: Each recipient now 50 bytes (32 + 2 + 8 + 8)
      if (offset + 50 > data.length) {
        console.warn(`Not enough data for recipient ${i}, stopping parsing`);
        break;
      }

      const wallet = new PublicKey(data.slice(offset, offset + 32)).toString();
      offset += 32;
      
      // ‚úÖ UPDATED: Basis points (u16) instead of percentage (u8)
      const basisPoints = data.readUInt16LE(offset);
      offset += 2;
      
      const claimedAmount = Number(this.readUint64LE(data, offset));
      offset += 8;
      
      const lastClaimTime = Number(this.readInt64LE(data, offset));
      offset += 8;

      if (basisPoints > 0) {
        recipients.push({
          wallet,
          basisPoints,  // ‚úÖ UPDATED: Use basis points
          percentage: basisPoints / 100,  // ‚úÖ LEGACY: For compatibility
          claimedAmount,
          lastClaimTime
        });
      }
    }
    
    return {
      isInitialized,
      initializer,
      mint,
      vault,
      startTime,
      totalAmount,
      cliffPeriod,
      vestingPeriod,
      tgeBasisPoints,  // ‚úÖ UPDATED: Use basis points
      recipientCount,
      isFinalized,  // ‚úÖ UPDATED: New field
      lastDistributionTime,  // ‚úÖ UPDATED: New field
      recipients
    };
  }

  // ‚úÖ ADDED: Helper methods for reading BigInt from buffer
  private readUint64LE(buffer: Buffer, offset: number): bigint {
    const low = buffer.readUInt32LE(offset);
    const high = buffer.readUInt32LE(offset + 4);
    return BigInt(low) + (BigInt(high) << 32n);
  }

  private readInt64LE(buffer: Buffer, offset: number): bigint {
    const value = this.readUint64LE(buffer, offset);
    if (value >= 0x8000000000000000n) {
      return value - 0x10000000000000000n;
    }
    return value;
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
  private loadVestingContracts() {
    try {
      console.log('üìã Loading vesting contracts from environment...');
      
      const contracts: Array<Omit<VestingContract, 'id'>> = [];
      
      // –î–æ–±–∞–≤–ª—è–µ–º Solana –∫–æ–Ω—Ç—Ä–∞–∫—Ç –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
      if (this.config.solana.vestingPDA && this.config.solana.privateKey) {
        contracts.push({
          chain: 'solana',
          address: this.config.solana.vestingPDA,
          beneficiaryAddress: 'system', // –î–ª—è Solana –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
          startTime: 0, // Will be loaded from contract
          recipients: [], // Will be loaded from contract
          lastDistributionTime: 0,
          isActive: true,
          distributedPeriods: new Set<number>(),
          totalDistributed: '0',
          lastCheckedAmount: '0'
        });
        console.log(`‚úÖ Configured Solana contract: ${this.config.solana.vestingPDA}`);
      } else {
        console.log(`‚ö†Ô∏è  Solana contract not configured - missing private key or PDA address`);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º BNB –∫–æ–Ω—Ç—Ä–∞–∫—Ç –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
      console.log('üîç BNB Configuration check:');
      console.log(`  - Contract Address: ${this.config.bnb.contractAddress || 'MISSING'}`);
      console.log(`  - Private Key: ${this.config.bnb.privateKey ? 'SET' : 'MISSING'}`);
      console.log(`  - Known Initializer: ${this.config.bnb.knownInitializer || 'MISSING'}`);
      
      if (this.config.bnb.contractAddress && this.config.bnb.privateKey && this.config.bnb.knownInitializer) {
        // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∞–¥—Ä–µ—Å –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç known initializer
        try {
          const wallet = new ethers.Wallet(this.config.bnb.privateKey);
          console.log(`  - Wallet address from private key: ${wallet.address}`);
          console.log(`  - Expected initializer: ${this.config.bnb.knownInitializer}`);
          
          if (wallet.address.toLowerCase() !== this.config.bnb.knownInitializer.toLowerCase()) {
            console.log(`‚ö†Ô∏è  WARNING: Private key wallet (${wallet.address}) != known initializer (${this.config.bnb.knownInitializer})`);
          }
        } catch (error) {
          console.log(`‚ùå Invalid BNB private key format:`, error);
        }
        
        contracts.push({
          chain: 'bnb',
          address: this.config.bnb.contractAddress,
          beneficiaryAddress: this.config.bnb.knownInitializer,
          startTime: 0, // Will be loaded from contract
          recipients: [], // Will be loaded from contract
          lastDistributionTime: 0,
          isActive: true,
          distributedPeriods: new Set<number>(),
          totalDistributed: '0',
          lastCheckedAmount: '0'
        });
        console.log(`‚úÖ Configured BNB contract: ${this.config.bnb.contractAddress}`);
      } else {
        console.log(`‚ö†Ô∏è  BNB contract not configured - missing private key, contract address, or initializer`);
        console.log(`   Set BNB_CONTRACT_ADDRESS, BNB_PRIVATE_KEY, and KNOWN_INITIALIZER environment variables`);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
      contracts.forEach(contract => {
        const id = this.addVestingContract(contract);
        console.log(`‚úÖ Loaded ${contract.chain.toUpperCase()} vesting contract: ${id}`);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        this.loadContractData(id).catch(error => {
          const errorMessage = this.getErrorMessage(error);
          console.error(`‚ùå Error loading contract data for ${id}:`, errorMessage);
        });
      });

      if (contracts.length === 0) {
        console.log(`‚ö†Ô∏è  No contracts loaded! Please check your environment configuration.`);
        console.log(`   Required for Solana: SOLANA_PRIVATE_KEY, SOLANA_VESTING_PDA`);
        console.log(`   Required for BNB: BNB_PRIVATE_KEY, BNB_CONTRACT_ADDRESS, KNOWN_INITIALIZER`);
      } else {
        console.log(`üìã Total contracts loaded: ${contracts.length}`);
      }
      
    } catch (error) {
      const errorMessage = this.getErrorMessage(error);
      console.error('‚ùå Error loading vesting contracts:', errorMessage);
    }
  }

  // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  private async loadContractData(contractId: string) {
    const contract = this.vestingContracts.get(contractId);
    if (!contract) return;

    try {
      console.log(`üîÑ Loading contract data for ${contractId}...`);
      
      if (contract.chain === 'solana') {
        await this.loadSolanaContractData(contract);
      } else if (contract.chain === 'bnb') {
        await this.loadBNBContractData(contract);
      }
      
      console.log(`‚úÖ Contract data loaded for ${contractId}`);
    } catch (error) {
      const errorMessage = this.getErrorMessage(error);
      console.error(`‚ùå Failed to load contract data for ${contractId}:`, errorMessage);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö Solana –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  private async loadSolanaContractData(contract: VestingContract) {
    try {
      const connection = new Connection(this.config.solana.rpcUrl, 'confirmed');
      const vestingPDA = new PublicKey(contract.address);
      
      console.log(`üìä Fetching Solana vesting data from ${contract.address}...`);
      
      const vestingAccountInfo = await connection.getAccountInfo(vestingPDA);
      if (!vestingAccountInfo) {
        console.warn(`‚ö†Ô∏è  Solana vesting account not found: ${contract.address}`);
        return;
      }
      
      const vestingAccount = this.parseVestingAccount(vestingAccountInfo.data);
      
      if (!vestingAccount.isInitialized) {
        console.warn(`‚ö†Ô∏è  Solana vesting account not initialized: ${contract.address}`);
        return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
      contract.startTime = vestingAccount.startTime;
      
      console.log(`‚úÖ Solana contract data loaded:`);
      console.log(`   - Initialized: ${vestingAccount.isInitialized}`);
      console.log(`   - Start time: ${contract.startTime > 0 ? new Date(contract.startTime * 1000).toLocaleString() : 'Not funded'}`);
      console.log(`   - Total amount: ${vestingAccount.totalAmount} tokens`);
      console.log(`   - Recipients: ${vestingAccount.recipientCount}`);

      // –ï—Å–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –ø—Ä–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
      if (vestingAccount.startTime === 0) {
        console.log(`‚è≥ Solana vesting not funded yet, will check again later`);
        setTimeout(() => this.loadContractData(contract.id), 60000);
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏–∑ vesting –∞–∫–∫–∞—É–Ω—Ç–∞
      contract.recipients = vestingAccount.recipients.map(r => ({
        wallet: r.wallet,
        percentage: r.percentage
      }));

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–∂–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ claimed amounts
      const totalClaimed = vestingAccount.recipients.reduce((sum, r) => sum + BigInt(r.claimedAmount), 0n);
      const totalAmount = BigInt(vestingAccount.totalAmount);
      
      if (totalClaimed > 0n) {
        const claimedPercentage = Number((totalClaimed * 100n) / totalAmount);
        
        console.log(`   - Claimed percentage: ${claimedPercentage}%`);
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
        contract.distributedPeriods.clear(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º
        
        if (claimedPercentage >= 9.5) contract.distributedPeriods.add(10);   // 10% ¬± –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
        if (claimedPercentage >= 19.5) contract.distributedPeriods.add(20);  // 20% ¬± –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å  
        if (claimedPercentage >= 49.5) contract.distributedPeriods.add(50);  // 50% ¬± –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
        if (claimedPercentage >= 99.5) contract.distributedPeriods.add(100); // 100% ¬± –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
        
        contract.totalDistributed = totalClaimed.toString();
        
        console.log(`   - Recalculated distributed periods based on claimed amount: [${Array.from(contract.distributedPeriods).join(', ')}]`);
      } else {
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–∫–ª–µ–π–º–ª–µ–Ω–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–µ—Ä–∏–æ–¥—ã
        contract.distributedPeriods.clear();
      }
      
      console.log(`‚úÖ Loaded ${vestingAccount.recipients.length} recipients for Solana contract`);
      console.log(`   - Total distributed: ${totalClaimed.toString()} (${contract.distributedPeriods.size} periods)`);
      console.log(`   - Distributed periods: [${Array.from(contract.distributedPeriods).join(', ')}]`);

    } catch (error) {
      const errorMessage = this.getErrorMessage(error);
      console.warn(`‚ö†Ô∏è  Could not load Solana contract data: ${errorMessage}`);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö BNB –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  private async loadBNBContractData(contract: VestingContract) {
    try {
      const provider = new ethers.JsonRpcProvider(this.config.bnb.rpcUrl);
      const vestingABI = [
        'function getVestingSchedule(address beneficiary) external view returns (bool isInitialized, address token, address authorizedFunder, uint256 startTime, uint256 cliffDuration, uint256 vestingDuration, uint256 totalAmount, uint256 claimedAmount, uint8 recipientCount)',
        'function getRecipients(address beneficiary) external view returns (tuple(address wallet, uint16 basisPoints, uint256 claimedAmount, uint256 lastClaimTime)[])',
        'function getClaimableAmount(address beneficiary) external view returns (uint256)'
      ];
      
      console.log(`üìä Fetching BNB vesting data from ${contract.address}...`);
      
      const vestingContract = new ethers.Contract(
        contract.address,
        vestingABI,
        provider
      );
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–µ—Å—Ç–∏–Ω–≥–∞
      console.log(`üîç Checking vesting schedule for beneficiary: ${contract.beneficiaryAddress}`);
      const schedule = await vestingContract.getVestingSchedule(contract.beneficiaryAddress);
      console.log(`üìã Schedule found:`, {
        isInitialized: schedule.isInitialized,
        startTime: schedule.startTime.toString(),
        totalAmount: ethers.formatEther(schedule.totalAmount)
      });
      
      if (!schedule.isInitialized) {
        console.warn(`‚ö†Ô∏è  No vesting schedule found for beneficiary ${contract.beneficiaryAddress}`);
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ (safely convert BigInt to number)
      contract.startTime = schedule.startTime > 0n ? Number(schedule.startTime) : 0;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –∫–ª–µ–π–º–∞ —Ç–æ–∫–µ–Ω—ã
      const claimableAmount = await vestingContract.getClaimableAmount(contract.beneficiaryAddress);
      
      console.log(`‚úÖ BNB contract data loaded:`);
      console.log(`   - Initialized: ${schedule.isInitialized}`);
      console.log(`   - Start time: ${contract.startTime > 0 ? new Date(contract.startTime * 1000).toLocaleString() : 'Not funded'}`);
      console.log(`   - Total amount: ${ethers.formatEther(schedule.totalAmount)} tokens`);
      console.log(`   - Claimed amount: ${ethers.formatEther(schedule.claimedAmount)} tokens`);
      console.log(`   - Claimable now: ${ethers.formatEther(claimableAmount)} tokens`);
      console.log(`   - Recipients: ${schedule.recipientCount}`);

      // –ï—Å–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –ø—Ä–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
      if (contract.startTime === 0) {
        console.log(`‚è≥ BNB vesting not funded yet, will check again later`);
        setTimeout(() => this.loadContractData(contract.id), 60000);
        return;
      }

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤
      if (schedule.claimedAmount > 0n) {
        const claimedPercentage = Number((schedule.claimedAmount * 100n) / schedule.totalAmount);
        
        console.log(`   - Claimed percentage: ${claimedPercentage}%`);
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
        // –£—á–∏—Ç—ã–≤–∞–µ–º —á—Ç–æ –∫–∞–∂–¥—ã–π –ø–µ—Ä–∏–æ–¥ –º–æ–∂–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è —á–∞—Å—Ç–∏—á–Ω–æ
        contract.distributedPeriods.clear(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º
        
        if (claimedPercentage >= 9.5) contract.distributedPeriods.add(10);   // 10% ¬± –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
        if (claimedPercentage >= 19.5) contract.distributedPeriods.add(20);  // 20% ¬± –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å  
        if (claimedPercentage >= 49.5) contract.distributedPeriods.add(50);  // 50% ¬± –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
        if (claimedPercentage >= 99.5) contract.distributedPeriods.add(100); // 100% ¬± –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
        
        contract.totalDistributed = schedule.claimedAmount.toString();
        
        console.log(`   - Recalculated distributed periods based on claimed amount: [${Array.from(contract.distributedPeriods).join(', ')}]`);
      } else {
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–∫–ª–µ–π–º–ª–µ–Ω–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–µ—Ä–∏–æ–¥—ã
        contract.distributedPeriods.clear();
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
      try {
        const recipients = await vestingContract.getRecipients(contract.beneficiaryAddress);
        
        contract.recipients = recipients.map((r: any) => ({
          wallet: r.wallet,
          percentage: Number(r.basisPoints) / 100  // Convert basis points to percentage for display
        }));

        console.log(`‚úÖ Loaded ${contract.recipients.length} recipients for BNB contract`);
        console.log(`   - Total distributed: ${schedule.claimedAmount.toString()} (${contract.distributedPeriods.size} periods)`);
        console.log(`   - Distributed periods: [${Array.from(contract.distributedPeriods).join(', ')}]`);
        console.log(`   - Contract active: ${contract.isActive}`);
      } catch (recipientError) {
        const errorMessage = this.getErrorMessage(recipientError);
        console.warn(`  ‚ö†Ô∏è  Could not load recipients: ${errorMessage}`);
      }

    } catch (error) {
      const errorMessage = this.getErrorMessage(error);
      console.warn(`‚ö†Ô∏è  Could not load BNB contract data: ${errorMessage}`);
    }
  }

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  getStats() {
    return {
      isRunning: this.isRunning,
      totalContracts: this.vestingContracts.size,
      checkInterval: this.checkInterval,
      activeContracts: Array.from(this.vestingContracts.values()).filter(c => c.isActive).length
    };
  }

  getContracts() {
    return Array.from(this.vestingContracts.values());
  }

  // –ú–µ—Ç–æ–¥—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
  getVestingContracts(): VestingContract[] {
    return Array.from(this.vestingContracts.values());
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  addVestingContract(contractData: Omit<VestingContract, 'id'>) {
    const id = `${contractData.chain}_${contractData.address}_${Date.now()}`;
    const contract: VestingContract = { 
      ...contractData, 
      id,
      distributedPeriods: contractData.distributedPeriods || new Set<number>(),
      totalDistributed: contractData.totalDistributed || '0',
      lastCheckedAmount: contractData.lastCheckedAmount || '0'
    };
    this.vestingContracts.set(id, contract);
    console.log(`‚úÖ Added new ${contract.chain} contract: ${id}`);
    this.emit('contractAdded', contract);
    return id;
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è)
  addContract(contractData: Omit<VestingContract, 'id'>) {
    return this.addVestingContract(contractData);
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  removeContract(id: string) {
    const removed = this.vestingContracts.delete(id);
    if (removed) {
      console.log(`üóëÔ∏è Removed contract: ${id}`);
    }
    return removed;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  updateContract(id: string, updates: Partial<VestingContract>) {
    const contract = this.vestingContracts.get(id);
    if (contract) {
      Object.assign(contract, updates);
      console.log(`üîÑ Updated contract: ${id}`);
      return true;
    }
    return false;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–π —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  resetDistributionState(contractId: string) {
    const contract = this.vestingContracts.get(contractId);
    if (contract) {
      contract.distributedPeriods.clear();
      contract.totalDistributed = '0';
      contract.lastDistributionTime = 0;
      console.log(`üîÑ Reset distribution state for contract: ${contractId}`);
      return true;
    }
    return false;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–π —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  reactivateContract(contractId: string): boolean {
    const contract = this.vestingContracts.get(contractId);
    if (contract) {
      contract.isActive = true;
      console.log(`üîÑ Manually reactivated contract: ${contractId}`);
      return true;
    }
    return false;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–π –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞  
  deactivateContract(contractId: string): boolean {
    const contract = this.vestingContracts.get(contractId);
    if (contract) {
      contract.isActive = false;
      console.log(`‚è∏Ô∏è  Manually deactivated contract: ${contractId}`);
      return true;
    }
    return false;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
  getContractStatuses() {
    const statuses = Array.from(this.vestingContracts.values()).map(contract => ({
      id: contract.id,
      chain: contract.chain,
      isActive: contract.isActive,
      distributedPeriods: Array.from(contract.distributedPeriods),
      totalDistributed: contract.totalDistributed,
      startTime: contract.startTime,
      lastDistributionTime: contract.lastDistributionTime,
    }));
    
    console.log('üìä Contract statuses:', statuses);
    return statuses;
  }
}

export default AutoDistributionService;