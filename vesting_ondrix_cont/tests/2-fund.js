const {
    Connection,
    PublicKey,
    Keypair,
    Transaction,
    TransactionInstruction,
    sendAndConfirmTransaction,
    SYSVAR_CLOCK_PUBKEY,
} = require('@solana/web3.js');
const {
    TOKEN_PROGRAM_ID,
    getAccount,
    getAssociatedTokenAddress,
} = require('@solana/spl-token');
const fs = require('fs');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
let vestingData;
try {
    vestingData = JSON.parse(fs.readFileSync('./vesting-data.json', 'utf8'));
    console.log('üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ vesting –∏–∑ vesting-data.json');
} catch (error) {
    console.error('‚ùå –§–∞–π–ª vesting-data.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ 1-initialize.js');
    process.exit(1);
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∞–Ω–¥–∏–Ω–≥–∞
const FUNDING_CONFIG = {
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ñ–∞–Ω–¥–∏–Ω–≥–∞ (–≤ –±–∞–∑–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö, —É—á–∏—Ç—ã–≤–∞—è 9 decimals)
    AMOUNT: '1000000000000000', // 1,000,000 —Ç–æ–∫–µ–Ω–æ–≤ (1,000,000 * 10^9 = 1,000,000,000,000,000)
};

const connection = new Connection('https://api.devnet.solana.com');
const programId = new PublicKey(vestingData.programId);

// Load wallet - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
const payer = Keypair.fromSecretKey(
    new Uint8Array([121,57,255,6,112,96,247,20,173,144,245,221,185,78,101,113,207,219,147,111,45,236,157,151,173,203,143,55,221,30,40,148,109,97,131,212,128,246,139,74,2,92,61,150,14,249,22,118,144,216,76,1,17,4,254,205,67,217,187,163,42,252,14,128])
);

function createFundInstruction(
    programId,
    funder,
    sourceTokenAccount,
    vaultPDA,
    vestingPDA,
    amount
) {
    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: 1 –±–∞–π—Ç (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è) + 8 –±–∞–π—Ç (amount)
    const data = Buffer.alloc(9);
    
    // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è 1 = Fund
    data[0] = 1;
    
    // Amount (8 –±–∞–π—Ç, little endian)
    data.writeBigUInt64LE(BigInt(amount), 1);
    
    return new TransactionInstruction({
        programId,
        keys: [
            { pubkey: funder, isSigner: true, isWritable: true },                    // 0. Funder
            { pubkey: sourceTokenAccount, isSigner: false, isWritable: true },      // 1. Source Token Account
            { pubkey: vaultPDA, isSigner: false, isWritable: true },                // 2. Vault PDA
            { pubkey: vestingPDA, isSigner: false, isWritable: true },              // 3. Vesting PDA
            { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },       // 4. Token Program
            { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },    // 5. Clock Sysvar
        ],
        data,
    });
}

async function fundVesting() {
    console.log('üí∞ –§–ê–ù–î–ò–ù–ì VESTING –ö–û–ù–¢–†–ê–ö–¢–ê');
    console.log('=' .repeat(50));
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        if (vestingData.initializer !== payer.publicKey.toBase58()) {
            console.error('‚ùå –§–∞–Ω–¥–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–º –∂–µ —á—Ç–æ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä!');
            console.log('  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä:', vestingData.initializer);
            console.log('  –¢–µ–∫—É—â–∏–π —Ñ–∞–Ω–¥–µ—Ä:', payer.publicKey.toBase58());
            process.exit(1);
        }
        
        console.log('üìã –î–∞–Ω–Ω—ã–µ vesting:');
        console.log('  Vesting PDA:', vestingData.vestingPDA);
        console.log('  Vault PDA:', vestingData.vaultPDA);
        console.log('  –¢–æ–∫–µ–Ω:', vestingData.tokenMint);
        console.log('  –§–∞–Ω–¥–µ—Ä/–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä:', payer.publicKey.toBase58());
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏–º ATA payer'–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        const mint = new PublicKey(vestingData.tokenMint);
        const sourceTokenAccount = await getAssociatedTokenAddress(mint, payer.publicKey);
        
        console.log('üîç –ò—â–µ–º —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç:', sourceTokenAccount.toBase58());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å source –∞–∫–∫–∞—É–Ω—Ç–∞
        try {
            const sourceAccount = await getAccount(connection, sourceTokenAccount);
            console.log('‚úÖ –¢–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω!');
            console.log('üí∞ –ë–∞–ª–∞–Ω—Å:', sourceAccount.amount.toString(), '–±–∞–∑–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü');
            console.log('  –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å:', (Number(sourceAccount.amount) / 1e9).toFixed(2), '—Ç–æ–∫–µ–Ω–æ–≤');
            console.log('  –í–ª–∞–¥–µ–ª–µ—Ü:', sourceAccount.owner.toBase58());
            console.log('  Mint:', sourceAccount.mint.toBase58());
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ mint —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            if (sourceAccount.mint.toBase58() !== vestingData.tokenMint) {
                throw new Error(`Mint –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç! –û–∂–∏–¥–∞–µ—Ç—Å—è: ${vestingData.tokenMint}, –ø–æ–ª—É—á–µ–Ω: ${sourceAccount.mint.toBase58()}`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ –Ω–∞—à payer
            if (sourceAccount.owner.toBase58() !== payer.publicKey.toBase58()) {
                throw new Error(`–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç! –û–∂–∏–¥–∞–µ—Ç—Å—è: ${payer.publicKey.toBase58()}, –ø–æ–ª—É—á–µ–Ω: ${sourceAccount.owner.toBase58()}`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤
            if (BigInt(sourceAccount.amount) < BigInt(FUNDING_CONFIG.AMOUNT)) {
                throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤! –ù—É–∂–Ω–æ: ${FUNDING_CONFIG.AMOUNT}, –µ—Å—Ç—å: ${sourceAccount.amount}`);
            }
            
        } catch (error) {
            if (error.message.includes('could not find account')) {
                console.error('‚ùå –¢–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!');
                console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ç–æ–∫–µ–Ω—ã CaYYqEzktvpPXkqpFeUGrs5kt6QDk7vmnb5GVzydDJJb');
                console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å: spl-token balance CaYYqEzktvpPXkqpFeUGrs5kt6QDk7vmnb5GVzydDJJb');
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞:', error.message);
            }
            process.exit(1);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ vesting account —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—Ä–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω
        const vestingPDA = new PublicKey(vestingData.vestingPDA);
        const vestingAccountInfo = await connection.getAccountInfo(vestingPDA);
        
        if (!vestingAccountInfo) {
            throw new Error('Vesting –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é.');
        }
        
        console.log('‚úÖ Vesting –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä:', vestingAccountInfo.data.length, '–±–∞–π—Ç');
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Ñ–∞–Ω–¥–∏–Ω–≥–∞
        const vaultPDA = new PublicKey(vestingData.vaultPDA);
        
        const fundInstruction = createFundInstruction(
            programId,
            payer.publicKey,
            sourceTokenAccount,
            vaultPDA,
            vestingPDA,
            FUNDING_CONFIG.AMOUNT
        );
        
        console.log('\nüìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∞–Ω–¥–∏–Ω–≥–∞:');
        console.log('  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–±–∞–∑–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã):', FUNDING_CONFIG.AMOUNT);
        console.log('  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ç–æ–∫–µ–Ω—ã):', (Number(FUNDING_CONFIG.AMOUNT) / 1e9).toFixed(2));
        console.log('  Source –∞–∫–∫–∞—É–Ω—Ç:', sourceTokenAccount.toBase58());
        console.log('  Vault PDA:', vaultPDA.toBase58());
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        console.log('\nüîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ñ–∞–Ω–¥–∏–Ω–≥–∞...');
        const transaction = new Transaction().add(fundInstruction);
        
        const signature = await sendAndConfirmTransaction(
            connection,
            transaction,
            [payer],
            { commitment: 'confirmed' }
        );
        
        console.log('‚úÖ –§–ê–ù–î–ò–ù–ì –£–°–ü–ï–®–ï–ù!');
        console.log('üìú –ü–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', signature);
        console.log('üåê Explorer:', `https://explorer.solana.com/tx/${signature}?cluster=devnet`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        vestingData.fundAmount = FUNDING_CONFIG.AMOUNT;
        vestingData.fundSignature = signature;
        vestingData.fundTimestamp = new Date().toISOString();
        vestingData.funded = true;
        
        fs.writeFileSync('./vesting-data.json', JSON.stringify(vestingData, null, 2));
        console.log('üíæ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ vesting-data.json');
        
        console.log('\nüéØ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å 3-claim.js –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–∞–Ω–¥–∏–Ω–≥–∞:', error.message);
        process.exit(1);
    }
}

fundVesting();