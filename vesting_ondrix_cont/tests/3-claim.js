const {
    Connection,
    PublicKey,
    Keypair,
    Transaction,
    TransactionInstruction,
    sendAndConfirmTransaction,
    SYSVAR_CLOCK_PUBKEY,
} = require('@solana/web3.js');
const {
    TOKEN_PROGRAM_ID,
    getAccount,
    getAssociatedTokenAddress,
    createAssociatedTokenAccountInstruction,
} = require('@solana/spl-token');
const fs = require('fs');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
let vestingData;
try {
    vestingData = JSON.parse(fs.readFileSync('./vesting-data.json', 'utf8'));
    console.log('üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ vesting –∏–∑ vesting-data.json');
} catch (error) {
    console.error('‚ùå –§–∞–π–ª vesting-data.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ 1-initialize.js –∏ 2-fund.js');
    process.exit(1);
}

const connection = new Connection('https://api.devnet.solana.com');
const programId = new PublicKey(vestingData.programId);

// Load wallet - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
const payer = Keypair.fromSecretKey(
    new Uint8Array([121,57,255,6,112,96,247,20,173,144,245,221,185,78,101,113,207,219,147,111,45,236,157,151,173,203,143,55,221,30,40,148,109,97,131,212,128,246,139,74,2,92,61,150,14,249,22,118,144,216,76,1,17,4,254,205,67,217,187,163,42,252,14,128])
);

function createClaimInstruction(
    programId,
    initializer,
    vestingPDA,
    vaultPDA,
    vaultAuthority,
    recipientATAs
) {
    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: —Ç–æ–ª—å–∫–æ 1 –±–∞–π—Ç (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è)
    const data = Buffer.alloc(1);
    
    // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è 2 = Claim
    data[0] = 2;
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    const keys = [
        { pubkey: initializer, isSigner: true, isWritable: true },         // 0. Initializer (signer)
        { pubkey: vestingPDA, isSigner: false, isWritable: true },         // 1. Vesting PDA
        { pubkey: vaultPDA, isSigner: false, isWritable: true },           // 2. Vault PDA
        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },  // 3. Token Program
        { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false }, // 4. Clock Sysvar
        { pubkey: vaultAuthority, isSigner: false, isWritable: false },    // 5. Vault Authority PDA
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º ATA –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (6+)
    for (const ata of recipientATAs) {
        keys.push({ pubkey: ata, isSigner: false, isWritable: true });
    }
    
    return new TransactionInstruction({
        programId,
        keys,
        data,
    });
}

async function checkTokenBalances(recipientATAs, mint) {
    console.log('\nüí∞ –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:');
    for (let i = 0; i < recipientATAs.length; i++) {
        try {
            const account = await getAccount(connection, recipientATAs[i]);
            const balance = Number(account.amount);
            const humanBalance = (balance / 1e9).toFixed(6); // 9 decimals
            console.log(`  ${i + 1}. ${recipientATAs[i].toBase58()}: ${humanBalance} —Ç–æ–∫–µ–Ω–æ–≤ (${balance} –±–∞–∑–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü)`);
        } catch (error) {
            console.log(`  ${i + 1}. ${recipientATAs[i].toBase58()}: 0 —Ç–æ–∫–µ–Ω–æ–≤ (–∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω)`);
        }
    }
}

async function claimTokens() {
    console.log('üéØ CLAIM –¢–û–ö–ï–ù–û–í –ò–ó VESTING');
    console.log('=' .repeat(50));
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –ø—Ä–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω
        if (!vestingData.funded) {
            console.error('‚ùå Vesting –Ω–µ –ø—Ä–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω! –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ 2-fund.js');
            process.exit(1);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ caller —ç—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
        if (vestingData.initializer !== payer.publicKey.toBase58()) {
            console.error('‚ùå Claim –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä!');
            console.log('  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä:', vestingData.initializer);
            console.log('  –¢–µ–∫—É—â–∏–π caller:', payer.publicKey.toBase58());
            process.exit(1);
        }
        
        console.log('üìã –î–∞–Ω–Ω—ã–µ vesting:');
        console.log('  Vesting PDA:', vestingData.vestingPDA);
        console.log('  Vault PDA:', vestingData.vaultPDA);
        console.log('  –¢–æ–∫–µ–Ω:', vestingData.tokenMint);
        console.log('  –ü—Ä–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ:', (Number(vestingData.fundAmount) / 1e9).toFixed(2), '—Ç–æ–∫–µ–Ω–æ–≤');
        
        const vestingPDA = new PublicKey(vestingData.vestingPDA);
        const vaultPDA = new PublicKey(vestingData.vaultPDA);
        const mint = new PublicKey(vestingData.tokenMint);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º vault authority PDA
        const [vaultAuthority] = await PublicKey.findProgramAddress(
            [Buffer.from('authority'), vestingPDA.toBuffer()],
            programId
        );
        console.log('  Vault Authority:', vaultAuthority.toBase58());
        
        // –°–æ–∑–¥–∞–µ–º/–ø–æ–ª—É—á–∞–µ–º ATA –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        console.log('\nüîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ATA –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:');
        const recipientATAs = [];
        
        for (let i = 0; i < vestingData.recipients.length; i++) {
            const recipient = vestingData.recipients[i];
            const recipientPubkey = new PublicKey(recipient.wallet);
            
            const ata = await getAssociatedTokenAddress(mint, recipientPubkey);
            recipientATAs.push(ata);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å basis points
            const percentage = recipient.basisPoints ? (recipient.basisPoints / 100) : recipient.percentage;
            console.log(`  ${i + 1}. ${recipient.wallet} (${percentage}%)`);
            console.log(`     ATA: ${ata.toBase58()}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ ATA, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
            try {
                await getAccount(connection, ata);
                console.log('     ‚úÖ ATA —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            } catch (error) {
                console.log('     üîß –°–æ–∑–¥–∞–µ–º ATA...');
                
                const createATAInstruction = createAssociatedTokenAccountInstruction(
                    payer.publicKey,  // payer
                    ata,              // ata
                    recipientPubkey,  // owner
                    mint              // mint
                );
                
                const ataTx = new Transaction().add(createATAInstruction);
                const ataSignature = await sendAndConfirmTransaction(connection, ataTx, [payer]);
                console.log(`     ‚úÖ ATA —Å–æ–∑–¥–∞–Ω: ${ataSignature}`);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã
        await checkTokenBalances(recipientATAs, mint);
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é claim
        console.log('\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è...');
        
        const claimInstruction = createClaimInstruction(
            programId,
            payer.publicKey,      // initializer
            vestingPDA,
            vaultPDA,
            vaultAuthority,
            recipientATAs
        );
        
        console.log('üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã claim:');
        console.log('  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:', recipientATAs.length);
        console.log('  Cliff –ø–µ—Ä–∏–æ–¥:', vestingData.cliffPeriod, '—Å–µ–∫—É–Ω–¥');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å basis points
        const tgePercentage = vestingData.tgeBasisPoints ? (vestingData.tgeBasisPoints / 100) : vestingData.tgePercentage;
        console.log('  TGE –ø—Ä–æ—Ü–µ–Ω—Ç:', tgePercentage + '%');
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ —Ñ–∞–Ω–¥–∏–Ω–≥–∞
        if (vestingData.fundTimestamp) {
            const fundTime = new Date(vestingData.fundTimestamp);
            const currentTime = new Date();
            const elapsedSeconds = Math.floor((currentTime - fundTime) / 1000);
            console.log('  –í—Ä–µ–º—è —Å —Ñ–∞–Ω–¥–∏–Ω–≥–∞:', elapsedSeconds, '—Å–µ–∫—É–Ω–¥');
            
            if (elapsedSeconds < vestingData.cliffPeriod) {
                console.log(`  ‚è≥ –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è cliff: ${vestingData.cliffPeriod - elapsedSeconds} —Å–µ–∫—É–Ω–¥`);
                console.log(`  üí° –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ${tgePercentage}% (TGE)`);
            } else {
                const vestingProgress = Math.min(100, 
                    tgePercentage + 
                    ((100 - tgePercentage) * (elapsedSeconds - vestingData.cliffPeriod) / (vestingData.vestingPeriod - vestingData.cliffPeriod))
                );
                console.log(`  üí° –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ${vestingProgress.toFixed(2)}%`);
            }
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        console.log('\nüöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è...');
        const transaction = new Transaction().add(claimInstruction);
        
        const signature = await sendAndConfirmTransaction(
            connection,
            transaction,
            [payer],
            { 
                commitment: 'confirmed',
                skipPreflight: false
            }
        );
        
        console.log('‚úÖ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –£–°–ü–ï–®–ù–û!');
        console.log('üìú –ü–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', signature);
        console.log('üåê Explorer:', `https://explorer.solana.com/tx/${signature}?cluster=devnet`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        console.log('\nüéâ –ë–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:');
        await checkTokenBalances(recipientATAs, mint);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        if (!vestingData.claims) {
            vestingData.claims = [];
        }
        
        vestingData.claims.push({
            signature: signature,
            timestamp: new Date().toISOString(),
        });
        
        fs.writeFileSync('./vesting-data.json', JSON.stringify(vestingData, null, 2));
        console.log('üíæ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ vesting-data.json');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ claim:', error.message);
        
        // –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        if (error.logs) {
            console.log('\nüìã –õ–æ–≥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
            error.logs.forEach((log, i) => {
                console.log(`  ${i}: ${log}`);
            });
        }
        
        process.exit(1);
    }
}

claimTokens();